name: rtd

on:
  schedule:
    - cron: '0 2 * * *' # run at 2 AM UTC
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  rtd_build:
    name: rtd-build
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false

    if: github.repository_owner == 'MODFLOW-USGS'
    steps:
      - name: Checkout MODFLOW6 examples repo
        uses: actions/checkout@v2.3.4

      - name: Output repo information
        run: |
          echo ${{ github.repository_owner }}
          echo ${{ github.repository }}
          echo ${{ github.ref }}
          echo ${{ github.event_name }}
          echo ${{ github.sha }}

      - name: Setup symbolic link to gfortran
        run: |
          sudo ln -fs /usr/bin/gfortran-9 /usr/local/bin/gfortran
          sudo ln -fs /usr/bin/gcc-9 /usr/local/bin/gcc
          sudo ln -fs /usr/bin/g++-9 /usr/local/bin/g++

      - name: Install TeX Live and additional TrueType fonts
        shell: bash
        run: |
          sudo apt install texlive-latex-extra texlive-science fonts-liberation

      - name: Install pandoc
        shell: bash
        run: |
          wget https://github.com/jgm/pandoc/releases/download/2.10.1/pandoc-2.10.1-linux-amd64.tar.gz
          sudo tar xvzf pandoc-2.10.1-linux-amd64.tar.gz --strip-components=1 -C /usr/local
          pandoc --version

      # Standard python fails on windows without GDAL installation
      # Using custom bash shell ("shell: bash -l {0}") with Miniconda
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2.0.0
        with:
          python-version: ${{ matrix.python-version }}
          mamba-version: "*"
          channels: conda-forge
          auto-update-conda: true
          activate-environment: mf6ex
          use-only-tar-bz2: true

      - name: Print python version
        shell: bash -l {0}
        run: |
          python --version

      - name: Add packages to flopy environment using mamba or conda
        shell: bash -l {0}
        run: |
          mamba env update --name mf6ex --file etc/dependencies.yml
          pip install -r etc/requirements.usgs.txt

      - name: Run get_exes script
        shell: bash -l {0}
        run: |
          cd ./etc/
          python ci_get_exes.py
          cd ..

      - name: Run scripts to build model files
        shell: bash -l {0}
        run: |
          cd ./etc/
          python ci_build_files.py
          cd ..

      - name: Run processing script
        shell: bash -l {0}
        run: |
          cd ./scripts/
          python process-scripts.py
          cd ..

      - name: Run notebooks with jupytext for ReadtheDocs
        shell: bash -l {0}
        run: |
          cd ./etc/
          python ci_run_notebooks.py
          cd ..

      - name: Create package tables and examples.rst for ReadtheDocs
        shell: bash -l {0}
        run: |
          cd ./etc/
          python ci_create_examples_rst.py
          cd ..

      - name: List example rst files for ReadtheDocs
        shell: bash
        run: |
          ls -l .doc/_examples/

      - name: List example image files for ReadtheDocs
        shell: bash
        run: |
          ls -l .doc/_images/

      - name: List example notebook files for ReadtheDocs
        shell: bash
        run: |
          ls -l .doc/_notebooks/

      - name: Upload completed jupyter notebooks as an artifact for ReadtheDocs
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v2
        with:
          name: rtd-files-for-${{ github.sha }}
          path: |
            .doc/introduction.md
            .doc/examples.rst
            .doc/_examples
            .doc/_images
            .doc/_notebooks

  # trigger rtd if "rtd_build" job was successful
  rtd_trigger:
    name: rtd-trigger
    needs: rtd_build
    runs-on: ubuntu-20.04

    if: github.repository_owner == 'MODFLOW-USGS' && github.event_name == 'push'
    steps:
      - name: Checkout MODFLOW6 examples repo
        uses: actions/checkout@v2.3.4

      - name: Trigger RTDs build on push to repo branches
        uses: dfm/rtds-action@v1.0.2
        with:
          webhook_url: ${{ secrets.RTDS_WEBHOOK_URL }}
          webhook_token: ${{ secrets.RTDS_WEBHOOK_TOKEN }}
          commit_ref: ${{ github.ref }}
