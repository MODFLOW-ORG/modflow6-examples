name: MODFLOW 6 examples

on:
  schedule:
    - cron: '0 2 * * *' # run at 2 AM UTC
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: nightly-build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: Checkout MODFLOW6 examples repo
        uses: actions/checkout@v2

      - name: Cache pip
        uses: actions/cache@v2.1.0
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('etc/requirements.pip.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Print python version
        shell: bash
        run: |
          python --version

      - name: Install Python 3.8 packages
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r etc/requirements.pip.txt

      - name: Install additional python packages using pip
        shell: bash
        run: |
          pip install https://github.com/modflowpy/flopy/zipball/develop
          pip install https://github.com/modflowpy/pymake/zipball/master
          pip install https://github.com/Deltares/xmipy/zipball/develop

      - name: Update flopy from GitHub repo
        shell: python
        run: |
          import flopy
          flopy.mf6.utils.generate_classes(branch="develop", backup=False)

      - name: Print python package versions
        shell: python
        run: |
          import sys
          import numpy as np
          import matplotlib as mpl
          import flopy
          import pymake
          flopypth = flopy.__path__[0]
          pymakepth = pymake.__path__[0]
          print("python version:     {}".format(sys.version))
          print("numpy version:      {}".format(np.__version__))
          print("matplotlib version: {}".format(mpl.__version__))
          print("flopy version:      {}".format(flopy.__version__))
          print("pymake version:     {}".format(pymake.__version__))
          print("")
          print("flopy is installed in:  {}".format(flopypth))
          print("pymake is installed in: {}".format(pymakepth))

      - name: Get executables
        shell: python
        run: |
          import os
          import pymake
          pth = os.path.join("bin")
          if not os.path.isdir(pth):
              os.makedirs(pth)
          pymake.getmfexes(pth, verbose=True)

      - name: Replace MODFLOW 6 executables with the latest versions
        shell: python
        run: |
          import os
          import pymake
          url = pymake.get_repo_assets("MODFLOW-USGS/modflow6-nightly-build")["linux.zip"]
          pymake.download_and_unzip(url, "bin")

      - name: List executables
        shell: bash
        run: |
          ls -la ./bin/

      - name: Install TeX Live
        shell: bash
        run: |
          sudo apt install texlive-latex-extra texlive-science
#
#    - name: Build mf6io latex document
#      if: runner.os == 'Linux'
#      shell: python
#      run: |
#        import sys
#        import subprocess
#
#        ws = "./modflow6/doc/mf6io/"
#        bibnam = "mf6io.nightlybuild"
#        texnam = bibnam + ".tex"
#        cmds = [
#                ["pdflatex", texnam],
#                ["bibtex", bibnam],
#                ["pdflatex", texnam],
#                ["pdflatex", texnam],
#               ]
#        for cmd in cmds:
#            print("running command...'{}'".format(" ".join(cmd)))
#            with subprocess.Popen(cmd,
#                                  stdout=subprocess.PIPE,
#                                  stderr=subprocess.STDOUT,
#                                  cwd=ws) as process:
#                stdout, stderr = process.communicate(timeout=10)
#                if stdout:
#                    stdout = stdout.decode()
#                    print(stdout)
#                if stderr:
#                    print("\n\nError condition occurred:\n")
#                    stderr = stderr.decode()
#                    print(stderr)
#
#    - name: Rename and move the LaTeX document
#      if: runner.os == 'Linux'
#      shell: bash
#      run: |
#        ls -la ./modflow6/doc/mf6io/
#        mv ./modflow6/doc/mf6io/mf6io.nightlybuild.pdf mf6io.pdf
#        ls -la ./
#
#    - name: Upload a Build Artifact
#      uses: actions/upload-artifact@v2
#      with:
#        name: nightly
#        path: |
#          ./${{ matrix.artifact_name }}
#          ./${{ matrix.body_name }}
#
#    - name: Upload additional Build Artifacts
#      if: runner.os == 'Linux'
#      uses: actions/upload-artifact@v2
#      with:
#        name: nightly
#        path: |
#          ./mf6io.pdf
#
#  # make the release if previous job was successful
#  release:
#    name: Make a nightly release
#    needs: build
#    runs-on: ubuntu-latest
#
#    steps:
#    - name: Download a Build Artifact
#      uses: actions/download-artifact@v2
#      with:
#        name: nightly
#        path: ./nightly/
#
#    - name: List files in the artifact directory
#      shell: bash
#      run: |
#        pwd
#        ls -l ./nightly/
#
#    - name: Concatenate os specific bodyFiles
#      shell: bash
#      run: |
#        pwd
#        cat ./nightly/bodyFileWindows ./nightly/bodyFileMac ./nightly/bodyFileLinux > bodyFile
#        ls -l ./
#        rm ./nightly/bodyFile*
#        ls -l ./nightly/
#
#    - name: Get Current Time
#      uses: 1466587594/get-current-time@v1.0.0
#      id: current-time
#      with:
#        format: YYYYMMDD
#
#    - name: Use current time
#      env:
#        TIME: "${{ steps.current-time.outputs.time }}"
#        F_TIME: "${{ steps.current-time.outputs.formattedTime }}"
#      run: echo $TIME $F_TIME
#
#    - name: Delete Older Releases
#      uses: dev-drprasad/delete-older-releases@v0.1.0
#      with:
#        keep_latest: 30
#        delete_tags: true
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#    - name: Create a Release
#      uses: ncipollo/release-action@v1
#      with:
#        tag: ${{ steps.current-time.outputs.formattedTime }}
#        name: ${{ steps.current-time.outputs.formattedTime }} nightly build
#        bodyFile: bodyFile
#        allowUpdates: true
#        draft: false
#        token: ${{ secrets.GITHUB_TOKEN }}
#
#    - name: Upload compiled executables to the latest GitHub release
#      uses: svenstaro/upload-release-action@2.0.0
#      with:
#        repo_token: ${{ secrets.GITHUB_TOKEN }}
#        file: ./nightly/*
#        tag: ${{ steps.current-time.outputs.formattedTime }}
#        overwrite: true
#        file_glob: true
#
#    - name: Delete Artifact
#      uses: GeekyEggo/delete-artifact@v1.0.0
#      with:
#        name: nightly

