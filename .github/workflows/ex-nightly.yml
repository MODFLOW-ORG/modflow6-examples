name: MODFLOW 6 examples

on:
  schedule:
    - cron: '0 2 * * *' # run at 2 AM UTC
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: nightly-build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: Checkout MODFLOW6 examples repo
        uses: actions/checkout@v2

      - name: Setup symbolic link to gfortran on Linux
        run: |
          sudo ln -fs /usr/bin/gfortran-9 /usr/local/bin/gfortran
          sudo ln -fs /usr/bin/gcc-9 /usr/local/bin/gcc
          sudo ln -fs /usr/bin/g++-9 /usr/local/bin/g++

      - name: Cache pip
        uses: actions/cache@v2.1.0
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('etc/requirements.pip.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Print python version
        shell: bash
        run: |
          python --version

      - name: Install Python 3.8 packages
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r etc/requirements.pip.txt
          pip install -r etc/requirements.usgs.txt

      - name: Update flopy from GitHub repo
        shell: python
        run: |
          import flopy
          flopy.mf6.utils.generate_classes(branch="develop", backup=False)

      - name: Print python package versions
        shell: python
        run: |
          import sys
          import numpy as np
          import matplotlib as mpl
          import flopy
          import pymake
          flopypth = flopy.__path__[0]
          pymakepth = pymake.__path__[0]
          print("python version:     {}".format(sys.version))
          print("numpy version:      {}".format(np.__version__))
          print("matplotlib version: {}".format(mpl.__version__))
          print("flopy version:      {}".format(flopy.__version__))
          print("pymake version:     {}".format(pymake.__version__))
          print("")
          print("flopy is installed in:  {}".format(flopypth))
          print("pymake is installed in: {}".format(pymakepth))

      - name: Get executables
        shell: python
        run: |
          import os
          import pymake
          pth = os.path.join("bin")
          if not os.path.isdir(pth):
              os.makedirs(pth)
          pymake.getmfexes(pth, verbose=True)

      - name: Replace MODFLOW 6 executables with the latest versions
        shell: python
        run: |
          import os
          import pymake
          url = pymake.get_repo_assets("MODFLOW-USGS/modflow6-nightly-build")["linux.zip"]
          pymake.download_and_unzip(url, "bin", verbose=True)

      - name: List executables
        shell: bash
        run: |
          ls -la ./bin/

      - name: Run scripts without model runs and zip input files
        shell: python
        run: |
          import os
          import shutil
          from subprocess import Popen, PIPE
          pth = os.path.join("scripts")
          scripts = [file_name for file_name in os.listdir(pth) if
                     file_name.endswith(".py") and file_name.startswith("ex-")]
          for s in scripts:
              args = ("python", s, "--no_run", "--no_plot")
              proc = Popen(args, stdout=PIPE, stderr=PIPE, cwd=pth)
              stdout, stderr = proc.communicate()
              if stdout:
                  print(stdout.decode("utf-8"))
              if stderr:
                  print("Errors:\n{}".format(stderr.decode("utf-8")))
          # zip the input files
          shutil.make_archive("modflow6-examples", "zip", "examples")

      - name: Run scripts scripts plus processing script
        shell: bash
        run: |
          cd ./scripts/
          nosetests -v --with-id --with-timer ex-*
          python process-scripts.py
          cd ..

      - name: Run notebooks with nbconvert
        shell: python
        run: |
          import os
          import shutil
          # get list of notebooks
          pth = os.path.join("notebooks")
          nb_files = [os.path.join(pth, file_name)
                      for file_name in sorted(os.listdir(pth))
                      if file_name.endswith(".ipynb")]
          # create temporary directory
          output_pth = os.path.join(".docs", "_notebooks")
          if os.path.isdir(output_pth):
              shutil.rmtree(output_pth)
          os.makedirs(output_pth)
          # run the notebooks
          for fpth in nb_files:
              args = ("jupyter",
                      "nbconvert",
                      "--ExecutePreprocessor.timeout=600",
                      "--to",
                      "notebook",
                      "--execute",
                      fpth,
                      "--output-dir",
                      output_pth,
                      "--output",
                      os.path.basename(fpth)
                      )
              print(" ".join(args))
              os.system(" ".join(args))
          # zip the input files
          shutil.make_archive("modflow6-notebooks", "zip", output_pth)

      - name: Install TeX Live and pandoc
        shell: bash
        run: |
          sudo apt install texlive-latex-extra texlive-science pandoc

      - name: Build mf6examples latex document
        shell: python
        run: |
          import sys
          import subprocess

          ws = "./doc/"
          bibnam = "mf6examples"
          texnam = bibnam + ".tex"
          cmds = [
                  ["pdflatex", texnam],
                  ["bibtex", bibnam],
                  ["pdflatex", texnam],
                  ["pdflatex", texnam],
                 ]
          for cmd in cmds:
              print("running command...'{}'".format(" ".join(cmd)))
              with subprocess.Popen(cmd,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.STDOUT,
                                    cwd=ws) as process:
                  stdout, stderr = process.communicate(timeout=10)
                  if stdout:
                      stdout = stdout.decode()
                      print(stdout)
                  if stderr:
                      print("\n\nError condition occurred:\n")
                      stderr = stderr.decode()
                      print(stderr)

      - name: Rename and move the LaTeX document
        shell: bash
        run: |
          ls -la ./doc/
          mv ./doc/mf6examples.pdf mf6examples.pdf
          ls -la ./

      - name: Upload Build Artifacts
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v2
        with:
          name: nightly
          path: |
            ./mf6examples.pdf
            ./modflow6-examples.zip
            ./modflow6-notebooks.zip

  # make the release if previous job was successful
  release:
    name: Make a nightly release
    needs: build
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/master'
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: nightly
          path: ./nightly/

      - name: List files in the artifact directory
        shell: bash
        run: |
          pwd
          ls -l ./nightly/

      - name: Get Current Time
        uses: 1466587594/get-current-time@v1.0.0
        id: current-time
        with:
          format: YYYYMMDD

      - name: Use current time
        env:
          TIME: "${{ steps.current-time.outputs.time }}"
          F_TIME: "${{ steps.current-time.outputs.formattedTime }}"
        run: echo $TIME $F_TIME

      - name: Delete Older Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        with:
          keep_latest: 30
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create a Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.current-time.outputs.formattedTime }}
          name: ${{ steps.current-time.outputs.formattedTime }} nightly build
          body: "MODFLOW 6 examples"
          allowUpdates: true
          draft: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload compiled executables to the latest GitHub release
        uses: svenstaro/upload-release-action@2.0.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./nightly/*
          tag: ${{ steps.current-time.outputs.formattedTime }}
          overwrite: true
          file_glob: true

      - name: Delete Artifact
        uses: GeekyEggo/delete-artifact@v1.0.0
        with:
          name: nightly

  # trigger rtd if previous job was successful
  rtd:
    name: ReadtheDocs
    needs: release
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/master'
    steps:
      - name: Trigger RTDs build
        uses: dfm/rtds-action@v1
        with:
          webhook_url: ${{ secrets.RTDS_WEBHOOK_URL }}
          webhook_token: ${{ secrets.RTDS_WEBHOOK_TOKEN }}
          commit_ref: ${{ github.ref }}
